@page "/chatroom"
@inject NavigationManager navManager
@using Microsoft.AspNetCore.SignalR.Client;
@using BlazorApp1.Shared;

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <ChatMessage CSS="@item.CSS" Username="@item.Username" Body="@item.Body" />
                @*<div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>*@
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_messageInput"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_messageInput))">Send</button>
    </div>
}

@code {
    bool _isChatting = false;
    string _username;

    // on-screen message
    string _message;
    // new message input
    string _messageInput;

    List<Message> _messages = new();

    HubConnection? _hubConnection;

    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            _messages.Clear();
            string baseUrl = navManager.BaseUri;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(navManager.ToAbsoluteUri(HubUrls.Chat))
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception ex)
        {
            _message = $"ERROR: Failed to start chat client: {ex.Message}";
            _isChatting = false;
        }
    }

    async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left the chat room.");
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _messageInput = string.Empty;
        }
    }

    record Message(string Username, string Body, bool Mine)
    {
        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
